Dag 1.
- Grove opzet gemaakt het van project (MVC). Deze opzet steeds bijgewerkt adhv voortschrijdend inzicht.
- Database gekozen: MongoDB. Redenen: gegevens zijn in JSON aangeleverd, en bevatten twee typen records. MongoDB kende ik van een presentatie.
- Taal: Java icm JUnit en Spring
- Build: Maven
- Deply: Docker (app en db aparte container)
- Model: API/modules/libraries tussen Java en MongoDB uitgezocht. Spring ondersteund interactie tussen Java en MongoDB.
- Controller: enigszins bekend mee door een van de Academy-opdrachten. Gebruik maken van Spring om een REST-controller op te zetten.
- View: nog geen echt idee. HTML-pagina, JavaScript? NPM gebruiken? Request, React, Test-Drive?

Dag 2.
- Aanpak: van achter (DB/model) naar voor werken (view).
- Onderzoek gedaan naar combinatie JUnit, Spring en Fongo (Fake MongoDB). Werkende voorbeelden gevonden, maar niet zelf werkend gekregen.

Dag 3.
- Laatste poging ondernomen om JUnit, Spring en Fongo via .json bestand werkend te krijgen.
- Poging gestaakt om via .json te werken. In test wordt Fongo-DB gevuld via code ipv .json.
- Dit stelt mij in staat om via TDD het de benodigde queries te schrijven.
- Mappenstructuur gedefinieerd

Dag 4.
- Begonnen met eerste testen schrijven
- Eerste klassen gedefinieerd en met Spring gewerkt om Dependency Injection en MongoDB interactie te doen

Dag 5.
- Keuze gemaakt: bij elke front-end wijziging (andere query, andere 'pagina') wordt de query opnieuw uitgevoerd. Dan hoeft de back-end en view geen informatie vast te houden. Terwijl oorspronkelijke idee was om een interface tussen back-end en view te plaatsten die het mogelijk maakte om naar volgende/vorige 'pagina' te gaan.

mongo port niet gepublished, zou binnen swarm beschikbaar moeten zijn... als ik het goed begrijp
Zie: https://github.com/moby/moby/issues/32299